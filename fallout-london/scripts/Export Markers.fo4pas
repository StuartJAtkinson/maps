{
  Pip-boy Map Markers Export for xEdit by Joric (c) 2024
  Hotkey: Ctrl+Shift+D
}

unit UserScript;

uses SysUtils;

function Finalize: integer;
var
  i, j, k, count, doors, ItemsCount, quests, q: integer;
  g, e, r, area, cell, refs, a, b, ref, MapMarkerStat: IInterface;
  Obj, ChildObj: TJsonObject;
  s, id: string;
  items: TStringList;
  x,y,z, ax,ay,az, bx,by,bz: double;
begin
  Obj := TJsonObject.Create;

  for i := 0 to Pred(FileCount) do begin
    g := GroupBySignature(FileByIndex(i), 'WRLD');
    for j := 0 to Pred(ElementCount(g)) do begin
      e := ElementByIndex(g, j);
      if IsMaster(e) then begin
        ChildObj := Obj.O['worldspaces'].O[EditorID(e)];
        ChildObj['form_id'] := IntToHex(GetLoadOrderFormID(e), 8);
        ChildObj['name'] := GetElementEditValues(e, 'FULL');
        ChildObj.O['nw'].I['x'] := Integer(GetElementNativeValues(e, 'MNAM\Cell Coordinates\NW Cell\X'));
        ChildObj.O['nw'].I['y'] := Integer(GetElementNativeValues(e, 'MNAM\Cell Coordinates\NW Cell\Y'));
        ChildObj.O['se'].I['x'] := Integer(GetElementNativeValues(e, 'MNAM\Cell Coordinates\SE Cell\X'));
        ChildObj.O['se'].I['y'] := Integer(GetElementNativeValues(e, 'MNAM\Cell Coordinates\SE Cell\Y'));
        ChildObj.F['scale'] := Double(GetElementNativeValues(e, 'ONAM\World Map Scale'));
        ChildObj.O['offset'].F['x'] := Double(GetElementNativeValues(e, 'ONAM\Cell X Offset'));
        ChildObj.O['offset'].F['y'] := Double(GetElementNativeValues(e, 'ONAM\Cell Y Offset'));
        ChildObj.O['offset'].F['z'] := Double(GetElementNativeValues(e, 'ONAM\Cell Z Offset'));
        ChildObj.O['min'].F['x'] := Double(GetElementNativeValues(e, 'Object Bounds\NAM0\X'));
        ChildObj.O['min'].F['y'] := Double(GetElementNativeValues(e, 'Object Bounds\NAM0\Y'));
        ChildObj.O['max'].F['x'] := Double(GetElementNativeValues(e, 'Object Bounds\NAM9\X'));
        ChildObj.O['max'].F['y'] := Double(GetElementNativeValues(e, 'Object Bounds\NAM9\Y'));
      end;
    end;
  end;

  MapMarkerStat := RecordByFormID(FileByIndex(0), $00000010, False);
  for i := 0 to Pred(ReferencedByCount(MapMarkerStat)) do begin
    e := ReferencedByIndex(MapMarkerStat, i);
    cell := LinksTo(ElementByName(e, 'Cell'));
    ChildObj := Obj.A['markers'].AddObject;
    ChildObj['form_id'] := IntToHex(GetLoadOrderFormID(e), 8);
    ChildObj['type'] := GetElementEditValues(e, 'Map Marker\TNAM\Type');
    ChildObj['name'] := GetElementEditValues(e, 'Map Marker\FULL');
    ChildObj['cell_form_id'] := IntToHex(GetLoadOrderFormID(cell), 8);
    ChildObj['x'] := Double(GetElementNativeValues(e, 'DATA\Position\X'));
    ChildObj['y'] := Double(GetElementNativeValues(e, 'DATA\Position\Y'));
    ChildObj['z'] := Double(GetElementNativeValues(e, 'DATA\Position\Z'));
    area := LinksTo(ElementByName(cell, 'Worldspace'));
    if Assigned(area) then
      ChildObj['area'] := EditorID(area);
  end;

  count := 0;
  items := TStringList.Create;
  items.DelimitedText := 'BOOK NPC_ MISC';

  for k := 0 to Pred(items.Count) do begin
    g := GroupBySignature(FileByIndex(8), items[k]);
    for j := 0 to Pred(ElementCount(g)) do begin
      r := ElementByIndex(g, j);
      for i := 0 to Pred(ReferencedByCount(r)) do
      begin
        e := ReferencedByIndex(r, i);
        s := EditorID(r);

        if (Signature(r) = 'MISC') and (Signature(e) = 'REFR') then begin
          if pos('VinylRecord', s)=0 then continue;
        end 
        else
        if (Signature(r) = 'BOOK') and (Signature(e) = 'REFR') then begin
          //if (pos('PerkMag', s)=0) and (pos('CallingCard', s)=0) then continue;
        end
        else
        if (Signature(r) = 'NPC_') and (Signature(e) = 'ACHR') then begin
          if pos('_NPC_', s)=0 then continue;
          quests := 0;
          for q := 0 to Pred(ReferencedByCount(r)) do begin
            ref := ReferencedByIndex(r, q);
            if Signature(ref)='QUST' then Inc(quests);
          end;
          if quests = 0 then continue;
        end
        else continue

        ChildObj := Obj.A['markers'].AddObject;

        ChildObj['form_id'] := IntToHex(GetLoadOrderFormID(r), 8);
        ChildObj['editor_id'] := EditorID(r);
        ChildObj['instance_id'] := IntToHex(GetLoadOrderFormID(e), 8);

        ChildObj['type'] := Signature(r);

        ChildObj['name'] := GetElementEditValues(r, 'FULL');

        if Signature(r) = 'NPC_' then ChildObj['quests'] := quests;

        x := Double(GetElementNativeValues(e, 'DATA\Position\X'));
        y := Double(GetElementNativeValues(e, 'DATA\Position\Y'));
        z := Double(GetElementNativeValues(e, 'DATA\Position\Z'));

        ChildObj['x'] := x;
        ChildObj['y'] := y;
        ChildObj['z'] := z;

        // figure out location on the map
        cell := LinksTo(ElementByName(e, 'Cell'));
        area := LinksTo(ElementByName(cell, 'Worldspace'));
        if Assigned(area) then begin
          ChildObj['area'] := EditorID(area);
        end;

        if GetElementNativeValues(cell, 'DATA\Is Interior Cell') then
        begin
          ChildObj['cell_form_id'] := IntToHex(GetLoadOrderFormID(cell), 8);
          ChildObj['cell_editor_id'] := EditorID(cell);
          ChildObj['cell_name'] := GetElementEditValues(cell, 'FULL');

          // interior cell, find a door to the worldspace, update coordinates
          refs := FindChildGroup(ChildGroup(cell), 8, cell);
          for i := 0 to Pred(ElementCount(refs)) do begin
            a := ElementByIndex(refs, i);
            if Signature(BaseRecord(a)) <> 'DOOR' then
              continue;

            b := WinningOverride(LinksTo(ElementByPath(a, 'XTEL\Door')));
            if not Assigned(b) then Continue;
            if not ElementExists(b, 'XTEL') then Continue;

            area := LinksTo(ElementByName(LinksTo(ElementByName(b, 'Cell')), 'Worldspace'));
            if Assigned(area) then begin

              //ChildObj['door_id'] := IntToHex(GetLoadOrderFormID(a), 8);
              ChildObj['area'] := EditorID(area);

              ax := Double(GetElementNativeValues(a, 'XTEL\Position/Rotation\Position\X'));
              ay := Double(GetElementNativeValues(a, 'XTEL\Position/Rotation\Position\Y'));
              az := Double(GetElementNativeValues(a, 'XTEL\Position/Rotation\Position\Z'));

              bx := Double(GetElementNativeValues(b, 'XTEL\Position/Rotation\Position\X'));
              by := Double(GetElementNativeValues(b, 'XTEL\Position/Rotation\Position\Y'));
              bz := Double(GetElementNativeValues(b, 'XTEL\Position/Rotation\Position\Z'));

              x := x + ax - bx;
              y := y + ay - by;
              z := z + az - bz;

              ChildObj['x'] := x;
              ChildObj['y'] := y;
              ChildObj['z'] := z;

              break;
            end;
          end;

          Inc(count);
        end;
      end;
    end;
  end;

  AddMessage(Format('Collected %d items', [count]));

  //AddMessage(AdjustLineBreaks(Obj.ToJSON({Compact:=}False)));

  AddMessage('Saving markers.json...');
  Obj.SaveToFile(extractfilepath(paramstr(0))+'../markers.json', False, TEncoding.UTF8, True);
end;

end.

