{
  Pip-boy Map Markers Export for xEdit by Joric (c) 2024
  Hotkey: Ctrl+Shift+D
}

unit UserScript;

function Finalize: integer;
var
  i, j, k, count, ItemsCount: integer;
  g, e, ref, area, MapMarkerStat: IInterface;
  Obj, ChildObj: TJsonObject;
  id: string;
  items: array[0..100] of integer;
begin
  Obj := TJsonObject.Create;

  for i := 0 to Pred(FileCount) do begin
    g := GroupBySignature(FileByIndex(i), 'WRLD');
    for j := 0 to Pred(ElementCount(g)) do begin
      e := ElementByIndex(g, j);
      if IsMaster(e) then begin
        ChildObj := Obj.O['worldspaces'].O[EditorID(e)];
        ChildObj['form_id'] := IntToHex(GetLoadOrderFormID(e), 8);
        ChildObj['name'] := GetElementEditValues(e, 'FULL');
        ChildObj.O['nw'].I['x'] := Integer(GetElementNativeValues(e, 'MNAM\Cell Coordinates\NW Cell\X'));
        ChildObj.O['nw'].I['y'] := Integer(GetElementNativeValues(e, 'MNAM\Cell Coordinates\NW Cell\Y'));
        ChildObj.O['se'].I['x'] := Integer(GetElementNativeValues(e, 'MNAM\Cell Coordinates\SE Cell\X'));
        ChildObj.O['se'].I['y'] := Integer(GetElementNativeValues(e, 'MNAM\Cell Coordinates\SE Cell\Y'));
        ChildObj.F['scale'] := Double(GetElementNativeValues(e, 'ONAM\World Map Scale'));
        ChildObj.O['offset'].F['x'] := Double(GetElementNativeValues(e, 'ONAM\Cell X Offset'));
        ChildObj.O['offset'].F['y'] := Double(GetElementNativeValues(e, 'ONAM\Cell Y Offset'));
        ChildObj.O['offset'].F['z'] := Double(GetElementNativeValues(e, 'ONAM\Cell Z Offset'));
        ChildObj.O['min'].F['x'] := Double(GetElementNativeValues(e, 'Object Bounds\NAM0\X'));
        ChildObj.O['min'].F['y'] := Double(GetElementNativeValues(e, 'Object Bounds\NAM0\Y'));
        ChildObj.O['max'].F['x'] := Double(GetElementNativeValues(e, 'Object Bounds\NAM9\X'));
        ChildObj.O['max'].F['y'] := Double(GetElementNativeValues(e, 'Object Bounds\NAM9\Y'));
      end;
    end;
  end;

  MapMarkerStat := RecordByFormID(FileByIndex(0), $00000010, False);
  for i := 0 to Pred(ReferencedByCount(MapMarkerStat)) do begin
    e := ReferencedByIndex(MapMarkerStat, i);
    ChildObj := Obj.A['markers'].AddObject;
    ChildObj['form_id'] := IntToHex(GetLoadOrderFormID(e), 8);
    ChildObj['type'] := GetElementEditValues(e, 'Map Marker\TNAM\Type');
    ChildObj['name'] := GetElementEditValues(e, 'Map Marker\FULL');
    ChildObj['x'] := Double(GetElementNativeValues(e, 'DATA\Position\X'));
    ChildObj['y'] := Double(GetElementNativeValues(e, 'DATA\Position\Y'));
    ChildObj['z'] := Double(GetElementNativeValues(e, 'DATA\Position\Z'));
    area := LinksTo(ElementByName(LinksTo(ElementByName(e, 'Cell')), 'Worldspace'));
    if Assigned(area) then
      ChildObj['area'] := EditorID(area);
  end;


  items[0] := $0729B95C; // Calling Card
  items[1] := $0008E737; // 005 1 magazine
  items[2] := $0008E738; // 005 2 magazine
  items[3] := $0008E75E; // Protect and Survive
  ItemsCount := 4;

  count := 0;
  for j := 0 to Pred(ItemsCount) do begin
    MapMarkerStat := RecordByFormID(FileByLoadOrder(7), items[j], False);
    for i := 0 to Pred(ReferencedByCount(MapMarkerStat)) do begin
      e := ReferencedByIndex(MapMarkerStat, i);

      ref := LinksTo(ElementBySignature(e, 'NAME'));
      if not Assigned(ref) then continue;
      area := LinksTo(ElementByName(LinksTo(ElementByName(e, 'Cell')), 'Worldspace'));
      if not Assigned(area) then continue;

      ChildObj := Obj.A['markers'].AddObject;

      ChildObj['form_id'] := IntToHex(GetLoadOrderFormID(ref), 8);
      ChildObj['instance_id'] := IntToHex(GetLoadOrderFormID(e), 8);
      ChildObj['editor_id'] := EditorID(ref);
      ChildObj['type'] := GetElementEditValues(ref, 'FULL');
      ChildObj['signature'] := Signature(ref);
      ChildObj['name'] := GetElementEditValues(ref, 'FULL');
      ChildObj['x'] := Double(GetElementNativeValues(e, 'DATA\Position\X'));
      ChildObj['y'] := Double(GetElementNativeValues(e, 'DATA\Position\Y'));
      ChildObj['z'] := Double(GetElementNativeValues(e, 'DATA\Position\Z'));
      ChildObj['area'] := EditorID(area);

      Inc(count);
    end;
  end;

  AddMessage(Format('Collected %d items', [count]));

  //AddMessage(Obj.ToJSON({Compact:=}False));
  AddMessage('Saving markers.json...');
  Obj.SaveToFile('markers.json', False, TEncoding.UTF8, True);
end;

end.

