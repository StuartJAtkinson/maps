{
  Pip-boy Map Markers Export for xEdit by Joric (c) 2024
  Hotkey: Ctrl+Shift+D
}

unit UserScript;

uses SysUtils;

procedure SaveCoordinates(ChildObj: TJsonObject; ref: IInterface; path: string);
begin
  ChildObj.A['coordinates'].Add ( GetElementNativeValues(ref, path+'\X') );
  ChildObj.A['coordinates'].Add ( GetElementNativeValues(ref, path+'\Y') );
  ChildObj.A['coordinates'].Add ( GetElementNativeValues(ref, path+'\Z') );
end;


function FindExternalDoor(a: IInterface): IInterface;
var
  i: integer;
  b, refs, area, cell: IInterface;
begin

  b := WinningOverride(LinksTo(ElementByPath(a, 'XTEL\Door')));

  area := LinksTo(ElementByName(LinksTo(ElementByName(b, 'Cell')), 'Worldspace'));

  Result := b;

  if Assigned(area) then begin
    Exit;
  end;

  cell := LinksTo(ElementByName(b, 'Cell'));
  refs := FindChildGroup(ChildGroup(cell), 8, cell);
  for i := 0 to Pred(ElementCount(refs)) do begin
    a := ElementByIndex(refs, i);
    if Signature(BaseRecord(a)) <> 'DOOR' then
      continue;

    b := WinningOverride(LinksTo(ElementByPath(a, 'XTEL\Door')));
    area := LinksTo(ElementByName(LinksTo(ElementByName(b, 'Cell')), 'Worldspace'));

    if Assigned(area) then begin
      //AddMessage('Found nested door!');
      Result := b;
      Exit;
    end;

  end;
end;

procedure SaveDoors(ChildObj, a, b, area: IInterface);
begin
  ChildObj.O['properties'].O['doors'].O[ 'inner' ].S['ref_id'] := IntToHex(GetLoadOrderFormID(a), 8);
  ChildObj.O['properties'].O['doors'].O[ 'outer' ].S['ref_id'] := IntToHex(GetLoadOrderFormID(b), 8);
  SaveCoordinates(ChildObj.O['properties'].O['doors'].O['inner'], a, 'XTEL\Position/Rotation\Position');
  SaveCoordinates(ChildObj.O['properties'].O['doors'].O['outer'], b, 'XTEL\Position/Rotation\Position');
  ChildObj.O['properties'].S['area'] := EditorID(area);
end;

procedure FindArea(ChildObj, cell: IInterface);
var
  refs, a,b,c,d, refs2, cell2, area: IInterface;
  i,i2: integer;
begin

  refs := FindChildGroup(ChildGroup(cell), 8, cell);
  for i := 0 to Pred(ElementCount(refs)) do begin
    a := ElementByIndex(refs, i);
    if Signature(BaseRecord(a)) <> 'DOOR' then continue;
    b := WinningOverride(LinksTo(ElementByPath(a, 'XTEL\Door')));
    if Assigned(b) then begin
      area := LinksTo(ElementByName(LinksTo(ElementByName(b, 'Cell')), 'Worldspace'));
      if Assigned(area) then begin
        SaveDoors(ChildObj, a, b, area);
        Exit;
      end;
    end;
  end;

  // recursion is broken. try the second level right here
  for i := 0 to Pred(ElementCount(refs)) do begin
    a := ElementByIndex(refs, i);
    if Signature(BaseRecord(a)) <> 'DOOR' then continue;
    b := WinningOverride(LinksTo(ElementByPath(a, 'XTEL\Door')));
    if Assigned(b) then begin

      // second pair of doors, first door in the same cell as b but not b

      cell2 := LinksTo(ElementByName(b, 'Cell'));
      refs2 := FindChildGroup(ChildGroup(cell2), 8, cell2);
      for i2 := 0 to Pred(ElementCount(refs2)) do begin
        c := ElementByIndex(refs, i2);
        if Signature(BaseRecord(c)) <> 'DOOR' then continue;
        d := WinningOverride(LinksTo(ElementByPath(c, 'XTEL\Door')));

        //if GetLoadOrderFormID(a) = GetLoadOrderFormID(c) then continue;
        //if GetLoadOrderFormID(a) = GetLoadOrderFormID(d) then continue;
        //if GetLoadOrderFormID(b) = GetLoadOrderFormID(c) then continue;
        //if GetLoadOrderFormID(b) = GetLoadOrderFormID(d) then continue;

        if Assigned(d) then begin
          area := LinksTo(ElementByName(LinksTo(ElementByName(d, 'Cell')), 'Worldspace'));
          if Assigned(area) then begin
            AddMessage('found 2nd level door!');
            SaveDoors(ChildObj, a, d, area);
            Exit;
          end;
        end;
      end;
    end;
  end;

end;


function Finalize: integer;
var
  i, j, i2, k, w, count, doors, ItemsCount, quests, q, value: integer;
  f, g, e, r, area, cell, cell2, refs, refs2, a2, b2, a, b, ref, items, item, rec, perk, outfit: IInterface;
  Obj, ChildObj: TJsonObject;
  s, id, ref_id, door_id, other_door_id: string;
  sList: TStringList;
  x,y,z: double;
begin
  f := FileByIndex(8);
  Obj := TJsonObject.Create;

  Obj.S['type'] := 'FeatureCollection';

  r := RecordByFormID(FileByIndex(0), $00000010, False);
  for i := 0 to Pred(ReferencedByCount(r)) do begin
    e := ReferencedByIndex(r, i);
    if GetFile(e) <> f then continue;
    cell := LinksTo(ElementByName(e, 'Cell'));

    ChildObj := Obj.A['features'].AddObject;
    ChildObj.S['type'] := 'Feature';
    ChildObj.O['geometry'].S['type'] := 'Point';

    SaveCoordinates(ChildObj.O['geometry'], e, 'DATA\Position');

    ChildObj.O['properties'].S['title'] := GetElementEditValues(e, 'Map Marker\FULL');
    ChildObj.O['properties'].S['description'] := GetElementEditValues(e, 'Map Marker\TNAM\Type');
    ChildObj.O['properties'].S['ref_id'] := IntToHex(GetLoadOrderFormID(e), 8);
    ChildObj.O['properties'].S['form_id'] := IntToHex(GetLoadOrderFormID(r), 8);

    area := LinksTo(ElementByName(cell, 'Worldspace'));
    if Assigned(area) then begin
      ChildObj.O['properties'].S['area'] := EditorID(area);
    end;

  end;

  count := 0;
  sList := TStringList.Create;
  sList.DelimitedText := 'NPC_ ARMO BOOK MISC ALCH WEAP AMMO NOTE FLOR FURN CONT ACTI';

  for k := 0 to Pred(sList.Count) do begin
    g := GroupBySignature(f, sList[k]);
    AddMessage('Collecting ' + sList[k] +' ...');
    for j := 0 to Pred(ElementCount(g)) do begin
      r := ElementByIndex(g, j);
      for i := 0 to Pred(ReferencedByCount(r)) do
      begin
        e := ReferencedByIndex(r, i);
        s := EditorID(r);
        if GetFile(e) <> f then continue;

        if (Signature(r) = 'ARMO') and (Signature(e) = 'REFR') then begin
        end else
        if (Signature(r) = 'ACTI') and (Signature(e) = 'REFR') then begin
          if (pos('Folon_ACTI_CutethulhuDollActivator', s)=0)
          and (pos('FOLON_ACTI_LQLondon100',s)=0)
          and (pos('Folon_ACTI_BarryBoatBeacon',s)=0)
          then continue;
        end else
        if (Signature(r) = 'FURN') and (Signature(e) = 'REFR') then begin
          if (pos('Folon_Workbench', s)=0) then continue;
        end else
        if (Signature(r) = 'CONT') and (Signature(e) = 'REFR') then begin
          if (pos('Folon_SettlementWorkbench', s)=0)
          then continue;
        end else
        if (Signature(r) = 'NOTE') and (Signature(e) = 'REFR') then begin
        end else
        if (Signature(r) = 'FLOR') and (Signature(e) = 'REFR') then begin
          if (pos('WildMutfruit', s)=0) then continue;
        end else
        if (Signature(r) = 'AMMO') and (Signature(e) = 'REFR') then begin
        end else
        if (Signature(r) = 'WEAP') and (Signature(e) = 'REFR') then begin
        end else
        if (Signature(r) = 'ALCH') and (Signature(e) = 'REFR') then begin
          if (pos('RadX', s)=0)
          and (pos('Buffout', s)=0)
          and (pos('Med-X', s)=0) 
          and (pos('Psycho', s)=0)
          and (pos('Mentats', s)=0)
          and (pos('Overdrive', s)=0)
          and (pos('XCell', s)=0)
          and (pos('UltraJet', s)=0)
          and (pos('Folon_FoodDog', s)=0)
          then continue;
        end else
        if (Signature(r) = 'MISC') and (Signature(e) = 'REFR') then begin
          if (pos('VinylRecord', s)=0)
          and (pos('BobbleHead_', s)=0)
          and (pos('Folon_MiscCuteThulhu',s)=0)
          and (pos('Folon_MiscCard',s)=0)
          then continue;
        end else
        if (Signature(r) = 'BOOK') and (Signature(e) = 'REFR') then begin
          //if (pos('PerkMag', s)=0) and (pos('CallingCard', s)=0) then continue;
        end else
        if (Signature(r) = 'NPC_') and (Signature(e) = 'ACHR') then begin
          if pos('_NPC_', s)=0 then continue;
          quests := 0;
          for q := 0 to Pred(ReferencedByCount(r)) do begin
            ref := ReferencedByIndex(r, q);
            if Signature(ref)='QUST' then begin
              Inc(quests);
              break;
            end;
          end;
          if quests = 0 then continue;
        end else continue


        ChildObj := Obj.A['features'].AddObject;
        ChildObj.S['type'] := 'Feature';
        ChildObj.O['geometry'].S['type'] := 'Point';

        SaveCoordinates(ChildObj.O['geometry'], e, 'DATA\Position');

        ChildObj.O['properties'].S['title'] := GetElementEditValues(r, 'FULL');
        ChildObj.O['properties'].S['description'] := Signature(r);
        ChildObj.O['properties'].S['ref_id'] := IntToHex(GetLoadOrderFormID(e), 8);
        ChildObj.O['properties'].S['form_id'] := IntToHex(GetLoadOrderFormID(r), 8);
        ChildObj.O['properties'].S['editor_id'] := EditorID(r);


        if quests > 0 then begin
          for q := 0 to Pred(ReferencedByCount(r)) do begin
            ref := ReferencedByIndex(r, q);
            if Signature(ref)='QUST' then begin
                id := IntToHex(GetLoadOrderFormID(ref), 8);
                ChildObj.O['properties'].O['quests'].S[id] := EditorID(ref);
                if GetElementEditValues(ref, 'FULL') <> '' then
                  ChildObj.O['properties'].O['quests'].S[id] := GetElementEditValues(ref, 'FULL')
            end;
          end;

          items := ElementByName(r, 'Items');
          if Assigned(items) then begin
            for w := ElementCount(items) - 1 downto 0 do begin
              item := ElementByIndex(items, w);
              ref := LinksTo(ElementByPath(item, 'CNTO\Item'));
              if Signature(ref) = 'WEAP' then begin
                id := IntToHex(GetLoadOrderFormID(ref), 8);
                ChildObj.O['properties'].O['weapons'].S[id] := EditorID(ref);
                if GetElementEditValues(ref, 'FULL') <> '' then
                  ChildObj.O['properties'].O['weapons'].S[id] := GetElementEditValues(ref, 'FULL')
              end;
            end;
          end;

          outfit := LinksTo(ElementByPath(r, 'DOFT'));
          if Assigned(outfit) then begin
            items := ElementByPath(outfit, 'INAM');
            for w := ElementCount(items) - 1 downto 0 do begin
              item := ElementByIndex(items, w);
              ref := LinksTo(item);
              id := IntToHex(GetLoadOrderFormID(ref), 8);
              ChildObj.O['properties'].O['outfits'].S[id] := EditorID(ref);
              if GetElementEditValues(ref, 'FULL') <> '' then
                ChildObj.O['properties'].O['outfits'].S[id] := GetElementEditValues(ref, 'FULL')
            end;
          end;
        end;

        value := GetElementNativeValues(r, 'DATA\Value');
        if (value <> 0) then begin
          ChildObj.O['properties'].I['value'] := value;
        end;

        perk := LinksTo(ElementByPath(r, 'DNAM\Perk'));
        if Assigned(perk) then begin
          ChildObj.O['properties'].O['perks'].S[GetElementEditValues(perk, 'DESC')] := GetElementEditValues(perk, 'FULL');
        end


        // figure out location on the map
        cell := LinksTo(ElementByName(e, 'Cell'));
        area := LinksTo(ElementByName(cell, 'Worldspace'));
        if Assigned(area) then begin
          ChildObj.O['properties'].S['area'] := EditorID(area);
        end;

        if GetElementNativeValues(cell, 'DATA\Is Interior Cell') then
        begin

          ChildObj.O['properties'].O['cell'].S['form_id'] := IntToHex(GetLoadOrderFormID(cell), 8);
          ChildObj.O['properties'].O['cell'].S['editor_id'] := EditorID(cell);
          ChildObj.O['properties'].O['cell'].S['name'] := GetElementEditValues(cell, 'FULL');


          // interior cell, find a door to the worldspace, update coordinates
          FindArea(ChildObj, cell);
        end;
        Inc(count);
      end;
    end;
  end;

  g := GroupBySignature(f, 'WRLD');
  for j := 0 to Pred(ElementCount(g)) do begin
    e := ElementByIndex(g, j);
    if IsMaster(e) then begin
      ChildObj := Obj.O['worldspaces'].O[EditorID(e)];
      ChildObj['form_id'] := IntToHex(GetLoadOrderFormID(e), 8);
      ChildObj['title'] := GetElementEditValues(e, 'FULL');
      ChildObj.F['scale'] := GetElementNativeValues(e, 'ONAM\World Map Scale');
      ChildObj.A['offset'].Add ( GetElementNativeValues(e, 'ONAM\Cell X Offset') );
      ChildObj.A['offset'].Add ( GetElementNativeValues(e, 'ONAM\Cell Y Offset') );
      ChildObj.A['offset'].Add ( GetElementNativeValues(e, 'ONAM\Cell Z Offset') );
    end;
  end;

  AddMessage(Format('Collected %d items', [count]));

  //AddMessage(AdjustLineBreaks(Obj.ToJSON({Compact:=}False)));

  AddMessage('Saving markers.json...');
  Obj.SaveToFile(extractfilepath(paramstr(0))+'../markers.json', False, TEncoding.UTF8, True);
end;

end.

